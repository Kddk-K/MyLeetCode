package Other;

/**
 * 66.加一    难度：easy
 *
 * 给定一个由 整数 组成的 非空 数组所表示的非负整数，在该数的基础上加一。
 * 最高位数字存放在数组的首位， 数组中每个元素只存储单个数字。
 * 你可以假设除了整数 0 之外，这个整数不会以零开头。
 *
 * 示例 1：
 * 输入：digits = [1,2,3]
 * 输出：[1,2,4]
 * 解释：输入数组表示数字 123。
 *
 * 示例 2：
 * 输入：digits = [4,3,2,1]
 * 输出：[4,3,2,2]
 * 解释：输入数组表示数字 4321。
 *
 * 示例 3：
 * 输入：digits = [0]
 * 输出：[1]
 */

//思路：倒着看，不为9，直接加1，返回：为9的话，需要进位，变成0即可；
//      特殊情况 9 99 等，一直为9的，结果肯定是10 ，100 数组长度加1 ，首位为1
public class Array66 {
    public int[] plusOne(int[] digits) {
        int len = digits.length;
        //从后往前遍历，如果遇到的元素不为9，则直接加1，返回结果；若为9，则把此位的元素变为0，再遍历到前一位，若不为9则加1
        //想一下99、999这种数就很容易理解了
        for(int i = len - 1; i >= 0; i--){
            if(digits[i] != 9){
                digits[i] += 1;
                return digits;
            }else{
                digits[i] = 0;
            }
        }
        //扩容，最高位为1
        digits = new int[len + 1];
        digits[0] = 1;
        return digits;
    }
}

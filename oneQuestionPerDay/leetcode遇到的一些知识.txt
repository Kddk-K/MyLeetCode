一、位运算：
	1、与操作&：通常用于二进制的取位操作，例如一个数 and 1的结果就是取二进制的最末位。判断整数的奇偶。
	2、或操作|：通常用于二进制特定位上的无条件赋值，例如一个数or 1的结果就是把二进制最末位强行变成1。如果变0，对这个数or 1后减一，其实际意义就是把这个数强行变成最接近的偶数。
	3、或运算^：逆运算是他本身，妙招：
		交换两个位置的元素但不能使用额外空间，想到用异或运算，异或运算是不进位的二进制加法，性质如下：
         		若a ^ b = c,那么a ^ c = b 与 b ^ c = a 同时成立，即可交换两个变量的值
       		如交换a与b的值可以这样做：
              			a = a ^ b;
             		 	b = a ^ b;
             			a = a ^ b;
          		注意：在数组中使用异或运算交换两个变量的值的时候，一定要保证这两个变量不是同一个变量，即索引不能相同，否则会把这个位置上的数变成0
	4、非运算~：按位取反
	5、shl运算<<：	a shl b就表示把a转为二进制后左移b位（在后面添b个0）。例如100的二进制为1100100，而110010000转成十进制是400，那么100 shl 2 = 400。
			可以看出，a shl b的值实际上就是a乘以2的b次方，因为在二进制数后添一个0就相当于该数乘以2。
			通常认为a shl 1比a * 2更快，因为前者是更底层一些的操作。因此程序中乘以2的操作请尽量用左移一位来代替。
	6、shr运算>>：	和shl相似，a shr b表示二进制右移b位（去掉末b位），相当于a除以2的b次方（取整）。和上面一样的例子，那么400 shr2 = 100。
			我们也经常用shr 1来代替div 2，比如二分查找、堆的插入操作等等。想办法用shr代替除法运算可以使程序效率大大提高。
			最大公约数的二进制算法用除以2操作来代替慢得出奇的mod运算，效率可以提高60%。